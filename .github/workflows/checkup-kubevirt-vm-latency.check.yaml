name: checkup-kubevirt-vm-latency.checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  go-versions:
    name: Lookup go versions
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./checkups/kubevirt-vm-latency
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
      minimal: ${{ steps.versions.outputs.minimal }}
    steps:
      - uses: actions/checkout@v2
      - uses: arnested/go-version-action@v1
        id: versions
  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: go-versions
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.go-versions.outputs.minimal }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.45.2
          working-directory: ./checkups/kubevirt-vm-latency
          args: --timeout 3m --verbose vmlatency/... cmd/...
  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: go-versions
    strategy:
      matrix:
        version: ${{ fromJSON(needs.go-versions.outputs.matrix) }}
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.version }}
    - name: Run unit tests
      working-directory: ./checkups/kubevirt-vm-latency
      run: ./automation/make.sh --unit-test
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: go-versions
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.go-versions.outputs.minimal }}
      - name: Run build
        working-directory: ./checkups/kubevirt-vm-latency
        run: ./automation/make.sh --build-checkup
  e2e-test:
    name: e2e
    runs-on: ubuntu-latest
    env:
      CRI: docker
      KUBEVIRT_USE_EMULATION: true
    steps:
      - name: Unload the br_netfilter kernel module to remove traffic restriction between bridge ports
        run:  sudo rmmod br_netfilter
      - name: Check out code
        uses: actions/checkout@v2
      - name: Build kiagnose image
        run: ./automation/make.sh --build-core --build-core-image
      - name: Build checkup image
        working-directory: ./checkups/kubevirt-vm-latency
        run: ./automation/make.sh --build-checkup --build-checkup-image
      - name: Start cluster
        run: ./automation/make.sh --e2e -- --install-kind --install-kubectl --create-multi-node-cluster
      - name: Deploy kiagnose
        run: ./automation/make.sh --e2e -- --deploy-kiagnose
      - name: Deploy kubevirt, CNAO and the NetworkAttachementDefinition
        run: ./checkups/kubevirt-vm-latency/automation/make.sh --e2e -- --deploy-kubevirt --deploy-cnao --define-nad
      - name: Deploy VM latency checkup
        run: ./checkups/kubevirt-vm-latency/automation/make.sh --e2e -- --deploy-checkup
      - name: Run e2e tests
        run: ./checkups/kubevirt-vm-latency/automation/make.sh --e2e -- --run-tests
      - name: Delete cluster
        run: ./automation/make.sh --e2e -- --delete-cluster
